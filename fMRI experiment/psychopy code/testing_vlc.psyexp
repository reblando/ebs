<?xml version="1.0" ?>
<PsychoPy2experiment encoding="utf-8" version="3.2.1">
  <Settings>
    <Param name="Audio latency priority" updates="None" val="use prefs" valType="str"/>
    <Param name="Audio lib" updates="None" val="use prefs" valType="str"/>
    <Param name="Completed URL" updates="None" val="" valType="str"/>
    <Param name="Data filename" updates="None" val="u'data/%s_%s_%s' % (expInfo['participant'], expName, expInfo['date'])" valType="code"/>
    <Param name="Enable Escape" updates="None" val="True" valType="bool"/>
    <Param name="Experiment info" updates="None" val="{'participant':'', 'session':'001'}" valType="code"/>
    <Param name="Force stereo" updates="None" val="True" valType="bool"/>
    <Param name="Full-screen window" updates="None" val="True" valType="bool"/>
    <Param name="HTML path" updates="None" val="html" valType="str"/>
    <Param name="Incomplete URL" updates="None" val="" valType="str"/>
    <Param name="JS libs" updates="None" val="packaged" valType="str"/>
    <Param name="Monitor" updates="None" val="testMonitor" valType="str"/>
    <Param name="Save csv file" updates="None" val="False" valType="bool"/>
    <Param name="Save excel file" updates="None" val="False" valType="bool"/>
    <Param name="Save log file" updates="None" val="True" valType="bool"/>
    <Param name="Save psydat file" updates="None" val="True" valType="bool"/>
    <Param name="Save wide csv file" updates="None" val="True" valType="bool"/>
    <Param name="Screen" updates="None" val="1" valType="num"/>
    <Param name="Show info dlg" updates="None" val="True" valType="bool"/>
    <Param name="Show mouse" updates="None" val="False" valType="bool"/>
    <Param name="Units" updates="None" val="height" valType="str"/>
    <Param name="Use version" updates="None" val="" valType="str"/>
    <Param name="Window size (pixels)" updates="None" val="(1024, 768)" valType="code"/>
    <Param name="blendMode" updates="None" val="avg" valType="str"/>
    <Param name="color" updates="None" val="$[0,0,0]" valType="str"/>
    <Param name="colorSpace" updates="None" val="rgb" valType="str"/>
    <Param name="expName" updates="None" val="testing_vlc" valType="str"/>
    <Param name="exportHTML" updates="None" val="on Sync" valType="str"/>
    <Param name="logging level" updates="None" val="exp" valType="code"/>
  </Settings>
  <Routines>
    <Routine name="trial">
      <CodeComponent name="code">
        <Param name="Begin Experiment" updates="constant" val="import vlc&amp;#10;mom=vlc.Instance()&amp;#10;p=mom.media_player_new()&amp;#10;#p.set_fullscreen(True)" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code" valType="code"/>
      </CodeComponent>
    </Routine>
    <Routine name="play_audio">
      <CodeComponent name="code_2">
        <Param name="Begin Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="Begin Routine" updates="constant" val="start_time = globalClock.getTime()&amp;#10;this_one = audio&amp;#10;m=mom.media_new(this_one)&amp;#10;p.set_media(m)&amp;#10;p.play()&amp;#10;&amp;#10;while p.is_playing() or (globalClock.getTime()-start_time &lt; 2):&amp;#10;   win.flip()&amp;#10;&amp;#10;p.stop()" valType="extendedCode"/>
        <Param name="Code Type" updates="None" val="Py" valType="str"/>
        <Param name="Each Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="Each JS Frame" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Experiment" updates="constant" val="" valType="extendedCode"/>
        <Param name="End JS Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="End Routine" updates="constant" val="" valType="extendedCode"/>
        <Param name="disabled" updates="None" val="False" valType="bool"/>
        <Param name="name" updates="None" val="code_2" valType="code"/>
      </CodeComponent>
    </Routine>
  </Routines>
  <Flow>
    <Routine name="trial"/>
    <LoopInitiator loopType="TrialHandler" name="trials">
      <Param name="Selected rows" updates="None" val="" valType="str"/>
      <Param name="conditions" updates="None" val="[OrderedDict([('audio', 'parcelated_audio/11/11_1.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_2.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_3.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_4.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_5.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_6.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_7.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_8.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_9.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_10.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_11.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_12.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_13.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_14.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_15.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_16.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_17.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_18.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_19.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_20.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_21.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_22.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_23.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_24.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_25.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_26.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_27.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_28.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_29.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_30.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_31.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_32.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_33.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_34.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_35.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_36.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_37.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_38.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_39.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_40.ogg')]), OrderedDict([('audio', 'parcelated_audio/11/11_41.ogg')])]" valType="str"/>
      <Param name="conditionsFile" updates="None" val="audio_excel_sheets/11_audio.xlsx" valType="str"/>
      <Param name="endPoints" updates="None" val="[0, 1]" valType="num"/>
      <Param name="isTrials" updates="None" val="True" valType="bool"/>
      <Param name="loopType" updates="None" val="sequential" valType="str"/>
      <Param name="nReps" updates="None" val="1" valType="code"/>
      <Param name="name" updates="None" val="trials" valType="code"/>
      <Param name="random seed" updates="None" val="" valType="code"/>
    </LoopInitiator>
    <Routine name="play_audio"/>
    <LoopTerminator name="trials"/>
  </Flow>
</PsychoPy2experiment>
